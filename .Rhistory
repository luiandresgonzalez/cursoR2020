tipos
tipos <- c(rep("organico", 30),rep("convencional", 30))
tipos
fusion <- c(organico, convencional)
fusion
combinetaPiola <- data.frame(tipo = tipos, condicion = fusion)
View(combinetaPiola)
count(combinetaPiola)
ftable(combinetaPiola)
plot(combinetaPiola)
table(combinetaPiola)
summarise(combinetaPiola)
str(combinetaPiola)
combinetaPiola$tipo <- as.factor(combinetaPiola$tipo)
str(combinetaPiola) # tipo todavía no es factor
table(combinetaPiola)
plot(combinetaPiola)
graficopeola <- ggplot(combinetaPiola, aes(x=tipo)) +
geom_histogram(organico, fill = "red", alpha = 0.2) +
geom_histogram(convencional, fill = "red", alpha = 0.2)
graficopeola <- ggplot(combinetaPiola, aes(x = tipo, y = condicion)) +
geom_histogram(organico, fill = "red", alpha = 0.2) +
geom_histogram(convencional, fill = "red", alpha = 0.2)
graficopeola <- ggplot(combinetaPiola, aes(x = tipo, y = count(condicion)) +
table(combinetaPiola)
r
table(combinetaPiola)
ftable(combinetaPiola)
ftable(combinetaPiola)$convencional
test <- ftable(combinetaPiola)
typeof(test)
test
graficopeola <- ggplot(combinetaPiola, aes(condicion))
graficopeola + stat_count()
graficopeola <- ggplot(combinetaPiola, aes(condicion, fill = tipo))
graficopeola + stat_count()
graficopeola + stat_count(position = "dodge")
graficopeola + stat_count()
graficopeola + stat_count(position = "dodge")
graficopeola + stat_count(position = position_dodge(width = 1))
graficopeola + geom_bar()
graficopeola + geom_bar(position = "dodge")
graficopeola + geom_bar(position = position_dodge2(preserve = "single"))
graficopeola + geom_histogram()
graficopeola + geom_histogram(position = "dodge")
a <- ggplot(seals, ae s(x = long, y = lat))
a <- ggplot(seals, aes(x = long, y = lat))
library(ggplot2)
a <- ggplot(seals, aes(x = long, y = lat))
a
a + geom_curve()
a + geom_curve(aes(yend = lat + delta_lat,
xend = long + delta_long, curvature = z))
a + geom_curve(aes(yend = lat + delta_lat,
xend = long + delta_long))
?seals
b <- ggplot(economics, aes(date, unemploy))
b <- ggplot(economics, aes(date, unemploy))
b + geom_path(lineend="butt",
linejoin="round’, linemitre=1)
)
)
s
as
34132
b + geom_path(lineend="butt",
linejoin="round’, linemitre=1)
b + geom_path(lineend="butt",
linejoin="round", linemitre=1))
b + geom_path(lineend="butt",
linejoin="round", linemitre=1)
b + geom_polygon(aes(group = group))
b + geom_ribbon(aes(ymin=unemploy - 900,
ymax=unemploy + 900))
c <- ggplot(mpg, aes(hwy))
c + geom_area(stat = "bin")
c + geom_density(kernel = "gaussian")
celsius.to.fahrenheit <- function(entradaEnC){
salidaEnF <- (entradaEnC *9/5+32)
return(salidaEnF)
}
celsius.to.fahrenheit(36)
celsius.to.fahrenheit(c(34,234,351))
#Load in data. Labelled as 'Masterfile'
dat <- read.csv(file.choose("") , header=TRUE)
View(dat)
#Subset data frame for analysis of behaviour states/events (where interaction with different scent types is not split out)
dat.s<-subset(dat,Period=="Unscented toys")
View(dat.s)
#Log transform duration variable, Shapiro-Wilks shows not normally distributed, but residuals from model are ok.
hist(dat$Interactduration)
dat$loginteract<-log10(dat$Interactduration+2)
hist(dat$loginteract)
shapiro.test(dat$loginteract)
#Analysis part 4: ARB behaviours --------------------------------------\
hist(dat.s$Repetitive)
dat.s$logRepetitive<-log10(dat.s$Repetitive+2)
hist(dat.s$logRepetitive)
shapiro.test(dat.s$logRepetitive)
#crosstabs of likelihood of interacting or not, by period and scent
mytable <- xtabs(~dat.s$Period3+dat.s$ARB1zero, data=dat.s)
View(dat)
library(tidyverse)
View(dat)
dat %>%
select(Name, Interactduration)
dat %>%
select(Name, Period, Scent, Interactduration)
mydat <- dat %>%
select(Name, Period, Scent, Interactduration)
summarise(mydat)
summarize(mydat)
summarise_(mydat)
summarise(mydat)
summarise(mydat, .groups = Period)
summarise(mydat, mean = mean(Interactduration) .groups = Period)
summarise(mydat, mean = mean(Interactduration))
mydat <- dat %>%
select(Name, Period, Scent, Interactduration) %>%
group_by(Period) %>%
summarise(mean = mean(Interactduration, n = n()))
mydat
mydat <- dat %>%
select(Name, Period, Scent, Interactduration) %>%
group_by(Period) %>%
summarise(mean = mean(Interactduration))
mydat <- dat %>%
select(Name, Period, Scent, Interactduration) %>%
group_by(Period, Scent) %>%
summarise(mean = mean(Interactduration))
mydat
plot(mydat)
ggplot(mydat, aes(x = c(Period, Scent), y = Interactduration)) +
geom_ba()
ggplot(mydat, aes(x = c(Period, Scent), y = Interactduration)) +
geom_bar()
ggplot(mydat, aes(x = c(Period, Scent), y = mean)) +
geom_bar()
ggplot(mydat, aes(x = Period, y = mean)) +
geom_bar()
ggplot(mydat, aes(mean)) +
geom_bar()
ggplot(mydat, aes(mean)) +
geom_bar(Period)
ggplot(mydat, aes(mean)) +
geom_bar(Scent)
ggplot(mydat, aes(mean)) +
geom_boxplot()
ggplot(mydat, aes(mean)) +
geom_bar(aes(Period))
ggplot(dat, aes(Period, Interactduration)
stat_boxplot()
stat_boxplot(Interactduration)
geom_bar(stat = "identity")
ggplot(dat, aes(Period, Interactduration) +
geom_bar(stat = "identity")
sd
ggplot(dat, aes(Period, Interactduration) +
geom_bar(stat = "identity")
ggplot(dat, aes(Period) +
geom_bar(aes(fill = class))
geom_bar(aes(fill = class))
ggplot(dat, aes(Scent) +
geom_bar(aes(fill = class))
ggplot(dat, aes(Scent) +
geom_bar(aes(fill = class))
)
ggplot(dat, aes(Scent)) +
geom_bar(aes(fill = class))
ggplot(dat, aes(Interactduration)) +
geom_bar(aes(fill = Scent))
ggplot(dat, aes(Interactduration)) +
geom_bar(stat"identity", aes(fill = Scent))
ggplot(dat, aes(Interactduration)) +
geom_bar(stat"identity", aes(fill = Scent))
ggplot(dat, aes(Interactduration)) +
geom_bar(stat="identity", aes(fill = Scent))
ggplot(dat, aes(x=Period, y = Interactduration)) +
geom_bar(stat="identity", aes(fill = Scent))
ggplot(dat, aes(x=Period, y = Interactduration)) +
stat_summary_bin(fun.y = "mean", geom = "bar")
ggplot(dat, aes(x=Period, y = Interactduration)) +
stat_summary_bin(fun.data = "mean", geom = "bar")
ggplot(dat, aes(x=Period, y = Interactduration)) +
stat_summary_bin(fun.data = "mean", geom = "bar")
ggplot(dat, aes(x=Period, y = Interactduration)) +
geom_bar() +
stat_summary_bin(fun.data = "mean", geom = "bar")
ggplot(dat, aes(x=Period, y = Interactduration)) +
geom_bar() +
stat_summary_bin(fun.y = "mean", geom = "bar")
ggplot(dat, aes(x=Period, y = Interactduration)) +
geom_bar() +
stat_summary_bin(fun = "mean", geom = "bar")
ggplot(dat, aes(x=Period, y = Interactduration)) +
geom_bar() +
stat_summary_bin(fun = "mean", geom = "bar")
ggplot(dat, aes(Period) +
geom_bar()
ggplot(dat, aes(Period)) +
geom_bar()
ggplot(dat, aes(Period)) +
geom_bar() +
stat_summary(aes(y = Interactduration), fun = "mean", geom = "bar")
ggplot(dat, aes(Period)) +
stat_summary(aes(y = Interactduration), fun = "mean", geom = "bar")
ggplot(dat, aes(Period)) +
stat_summary(aes(y = Interactduration, fill = Period), fun = "mean", geom = "bar")
ggplot(dat, aes(Period)) +
stat_summary(aes(y = Interactduration, fill = Scent), fun = "mean", geom = "bar")
ggplot(dat, aes(Period)) +
stat_summary(aes(y = Interactduration, fill = Scent), fun = "mean", geom = "bar", position = "dodge")
View(dat)
ggplot(dat, aes(Period)) +
stat_summary(aes(y = Rest, fill = Scent), fun = "mean", geom = "bar", position = "dodge")
ggplot(dat, aes(Period)) +
stat_summary(aes(y = Rest, fill = Explore), fun = "mean", geom = "bar", position = "dodge")
ggplot(dat, aes(Period)) +
stat_summary(aes(y = Explore, fill = Scent), fun = "mean", geom = "bar", position = "dodge")
ggplot(data = dat) + aes(x = Period, y = Interactduration, fill = Scent) +
geom_boxplot(outlier.size = -1) + scale_fill_brewer(palette = "Greys") + geom_jitter(alpha=0.5,
ggplot(data = dat) + aes(x = Period, y = Interactduration, fill = Scent) +
geom_boxplot(outlier.size = -1) + scale_fill_brewer(palette = "Greys") + geom_jitter(alpha=0.5,
ggplot(data = dat) + aes(x = Period, y = Interactduration, fill = Scent) +
geom_boxplot(outlier.size = -1) + scale_fill_brewer(palette = "Greys") + geom_jitter(alpha=0.5,
#Figure 1
ggplot(data = dat) + aes(x = Period, y = Interactduration, fill = Scent) +
geom_boxplot(outlier.size = -1) + scale_fill_brewer(palette = "Greys") + geom_jitter(alpha=0.5,
position=position_jitterdodge(jitter.width=0.2),
aes(group= Scent))+
labs(y = "Duration of interaction with toy (s)") + theme_minimal()
d
ggplot(data = dat) + aes(x = Period, y = Interactduration, fill = Scent) +
geom_boxplot(outlier.size = -1) + scale_fill_brewer(palette = "Greys") + geom_jitter(alpha=0.5,
position=position_jitterdodge(jitter.width=0.2),
aes(group= Scent))+
labs(y = "Duration of interaction with toy (s)") + theme_minimal()
ggplot(data = dat) + aes(x = Period, y = Interactduration, fill = Scent) +
geom_boxplot(outlier.size = -1) + scale_fill_brewer(palette = "Greys") + geom_jitter(alpha=0.5,
position=position_jitterdodge(jitter.width=0.2),
aes(group= Scent))+
labs(y = "Duration of interaction with toy (s)")
ggplot(data = dat) + aes(x = Period, y = Interactduration, fill = Scent) +
geom_boxplot(outlier.size = -1)  + geom_jitter(alpha=0.5,
position=position_jitterdodge(jitter.width=0.2),
aes(group= Scent))+
labs(y = "Duration of interaction with toy (s)") + theme_minimal()
dat <- read.csv(file = "Masterfilerev.csv", header=TRUE)
temperatura <-- 37.5
rm(temperatura)
temperatura = 37.5
toroncho <- 2342342
2girls1cup <- 123
_raros <- 24
rm(toroncho)
24 -> tetete
rm(tetete)
(temperatura * 9/5) + 32
(37.5 * 9/5) + 32
(temperatura * 9/5) + 32
(temperatura * 9/5) + 32
rm(temperatura)
temperatura <- 37.5
(temperatura * 9/5) + 32
temperaturas <- 37.4, 37.7, 35.8, 36.4, 36.9, 36.8, 37.4, 37.9, 35.7, 36.7, 37.2, 39.0, 38.4, 37.0, 37.5, 37.5, 37.2, 37.2, 37.6, 36.4, 36.6, 37.1, 38.5, 38.7, 38.2, 38.7, 36.4, 37.2, 38.7, 37.1
temperaturas <- c(37.4, 37.7, 35.8, 36.4, 36.9, 36.8, 37.4, 37.9, 35.7, 36.7, 37.2, 39.0, 38.4, 37.0, 37.5, 37.5, 37.2, 37.2, 37.6, 36.4, 36.6, 37.1, 38.5, 38.7, 38.2, 38.7, 36.4, 37.2, 38.7, 37.1)
temperaturas <- rnorm(n = 30, mean = 37.6, sd = 1.5)
temperaturas <- rnorm(n = 30, mean = 37.6, sd = 1.5)
temperaturas
temperaturas[16]
temperaturas[17]
# si quiero ver un numero de indice determinado, solo pongo corchetes y el numero de indice
temperaturas[15]
mean(temperaturas)
temperaturas <- rnorm(n = 30000, mean = 37.6, sd = 1.5)
mean(temperaturas)
temperaturas <- rnorm(n = 3, mean = 37.6, sd = 1.5)
mean(temperaturas)
temperaturas <- rnorm(n = 3, mean = 37.6, sd = 1.5)
mean(temperaturas)
temperaturas <- rnorm(n = 30, mean = 37.6, sd = 1.5)
median(temperaturas)
desvio <- sd(temperaturas)
desvio
sd(temperaturas)
miVarianza <- desvio^2
temperaturas - 2
temperaturas
temperaturas * 2
hist(temperaturas)
temperaturas <- rnorm(n = 3000, mean = 37.6, sd = 1.5)
hist(temperaturas)
temperaturas <- rnorm(n = 3000000, mean = 37.6, sd = 1.5)
hist(temperaturas)
temperaturas <- rnorm(n = 30, mean = 37.6, sd = 1.5)
temp2 <- rnorm(n = 30, mean = 38.5, sd = 1.5)
t.test(temperaturas,temp2)
t.test(temperaturas,temp2, alternative = "greater")
t.test(temperaturas,temp2, alternative = "less")
(temperaturas * 9/5) + 32
# Desde aqui, arranca la tarea con el peso de los pollitos...
# Lo dejo a tu criterio.
library (tidyverse)
datos <- ChickWeight %>%
filter( Time == 2)
# Asigne a un vector "pesos" unicamente los datos correspondientes a "weight"
# para verlos mejor:
pesos <- datos ["weight"]
typeof(pesos)
# El paso anterior fue un fiasco, porque no me permitio hacer ni la
# Estadistica descriptiva, asi que probe haciendo un nuevo vector
# en un intento de extraer los valores.
pruebapesos <- c(datos["weight"])
typeof(datos)
str(datos)
str(ChickWeight)
typeof(ChickWeight)
datos <- ChickWeight %>%
filter( Time == 2) %>%
as.data.frame()
# Asigne a un vector "pesos" unicamente los datos correspondientes a "weight"
# para verlos mejor:
pesos <- datos ["weight"]
mean(pesos)
pesos
typeof(pesos)
as.vector(datos["weight"])
typeof(as.vector(datos["weight"]))
str(as.vector(datos["weight"]))
# Asigne a un vector "pesos" unicamente los datos correspondientes a "weight"
# para verlos mejor:
pesos <- datos ["weight",]
pesos
# Asigne a un vector "pesos" unicamente los datos correspondientes a "weight"
# para verlos mejor:
pesos <- datos [,"weight"]
pesos
# Asigne a un vector "pesos" unicamente los datos correspondientes a "weight"
# para verlos mejor:
pesos <- datos ["weight"]
# CORRECCION ===========
# Si pones
typeof(pesos)
# Te retorna que pesos se trata de una lista. No se pueden hacer las operaciones que queres
# con el tipo lista, y por eso tuviste problemas.
# El motivo por el cual el paso anterior no te funciono es porque R estaba esperando
# pongas un unico numero de indice, por ejemplo
datos[2]
# Te retorna que pesos se trata de una lista. Cuando le metes corchetes a algo que no es un vector, la cosa tiende a complicarse
# Porque uno simplemente no puede usar un solo numero (como hace con los vectores, que tienen una dimension)
# para algo que es una tabla que tiene mas de una dimension. De hecho:
dim(pesos)
pesos
pesos[3,1]
mean(pesos)
dim(pesos) #<- comando para ver las dimensiones de un objeto
mean(pesos)
# Te dice que el argumento no es numerico o logico.
# Donde esta el problema?
help(mean)
# Te dice que el argumento no es numerico o logico.
# Donde esta el problema?
args(mean)
typeof(pesos)
pesos[3,1] #<- retornar el indice de fila 3 y columna 1
datos ["weight"]
datos [,"weight"]
datos [*,"weight"]
datos [ , ]
# Si no ponemos nada adentro de los corchetes?
pesos[ , ]
pesos
# Si no ponemos nada adentro de los corchetes?
pesos[  ]
# Te retorna todo tal cual. Si solo especificamos columna (el valor despues
# de la coma) y no ponemos nada en las filas:
pesos[,1]
typeof(pesos[,1])
class(pesos[,1])
# Te retorna todo tal cual. Si solo especificamos columna (el valor despues
# de la coma) y no ponemos nada en las filas:
mean(pesos[,1])
class(pesos)
mode(pesos)
class(datos)
class(pesos)
typeof(datos)
typeof(pesos)
count(dim(pesos)) #<- comando para ver las dimensiones de un objeto
sum(dim(pesos)) #<- comando para ver las dimensiones de un objeto
pesos[3,1] #<- retornar el indice de fila 3 y columna 1
# Si no ponemos nada adentro de los corchetes?
pesos[  ]
# Te retorna todo tal cual. Si solo especificamos columna (el valor despues
# de la coma) y no ponemos nada en las filas:
mean(pesos[ , 1])
# Te retorna todo tal cual. Si solo especificamos columna (el valor despues
# de la coma) y no ponemos nada en las filas:
pesos[ , 1]
class(pesos[,1])
# Alternativamente, podes llamar a la columna por su nombre
peso[ , "weight"]
# Alternativamente, podes llamar a la columna por su nombre
pesos[ , "weight"]
c(datos["weight"])
datos$weight # esto da el mismo resultado.
# Varianza
sd (datos $weight)^2
var(datos$weight)
# Siguiendo con el ejercicio, ejecutar un boxplot
boxplot(datos$weight~datos$Diet)
summarise(.data = datos, .groups = Diet)
summarise(.data = datos, .groups = datos$Diet)
datos %>%
group_by(Diet) %>%
summarize(promedio = mean(), n = n())
datos %>%
group_by(Diet) %>%
summarize(promedio = mean(weight), n = n())
mtcars %>%
group_by(cyl) %>%
summarise(mean = mean(disp), n = n())
datos %>%
group_by(Diet) %>%
summarize(mean = mean(weight), n = n())
datos %>%
group_by(Diet) %>%
summarize(mean = mean(weight), sd = sd(weight), n = n())
# Desde aqui, arranca la tarea con el peso de los pollitos...
# Lo dejo a tu criterio.
library (tidyverse)
datos <- ChickWeight %>%
filter( Time == 2) %>%
as.data.frame()
# Asigne a un vector "pesos" unicamente los datos correspondientes a "weight"
# para verlos mejor:
pesos <- datos ["weight"]
mean(pesos)
help(mean)
typeof(pesos)
dim(pesos) #<- comando para ver las dimensiones de un objeto
pesos[3,1] #<- retornar el indice de fila 3 y columna 1
# Si no ponemos nada adentro de los corchetes?
pesos[  ]
# Te retorna todo tal cual. Si solo especificamos columna (el valor despues
# de la coma) y no ponemos nada en las filas:
pesos[ , 1]
class(pesos[,1])
pesos[ , "weight"] # todas las filas, columna weight
pruebapesos <- c(datos["weight"])
datos$weight # esto da el mismo resultado.
# Media de pesos
mean (datos $weight)
# Mediana
median (datos $weight)
# Desvio
sd (datos $weight)
# Varianza
sd (datos $weight)^2
# =======================
var(datos$weight) # Descubri que el comando para varianza es este!
# Histograma
hist (datos $weight)
# Tabla de frecuencias
table (datos $weight)
# Siguiendo con el ejercicio, ejecutar un boxplot
boxplot(datos$weight~datos$Diet)
# CORRECCION ===========
# El tidyverse nos va a ayudar a revoltijear los datos para que hagan
# lo que vos quieras. Por ejemplo, le decimos "agarrame datos, agrupalos
# por dieta, resumimelos con media desvio y " te queda:
datos %>%
group_by(Diet) %>%
summarize(mean = mean(weight), sd = sd(weight), n = n())
dat <- read.csv(file = "Masterfilerev.csv", header=TRUE)
view(dat)
mydat <- dat %>%
select(Name, Period, Scent, Interactduration) %>%
group_by(Period, Scent) %>%
summarise(mean = mean(Interactduration))
head(mydat)
mydat
ggplot(dat, aes(Period)) +
stat_summary(aes(y = Explore, fill = Scent), fun = "mean", geom = "bar", position = "dodge")
ggplot(data = dat) + aes(x = Period, y = Interactduration, fill = Scent) +
geom_boxplot(outlier.size = -1)  + geom_jitter(alpha=0.5,
position=position_jitterdodge(jitter.width=0.2),
aes(group= Scent))+
labs(y = "Duration of interaction with toy (s)") + theme_minimal()
mydat
ggplot(dat, aes(Period)) +
stat_summary(aes(y = Explore, fill = Scent), fun = "mean", geom = "bar", position = "dodge")
ggplot(dat, aes(x = Period)) +
stat_summary(aes(y = Explore, fill = Scent), fun = "mean", geom = "bar", position = "dodge")
View(dat)
ggplot(dat, aes(x = Period)) +
stat_summary(aes(y = Interactduration, fill = Scent), fun = "mean", geom = "bar", position = "dodge")
mydat
mydat <- dat %>%
select(Name, Period, Scent, Interactduration) %>%
group_by(Period, Scent) %>%
summarise(mean = mean(Interactduration), StdDev = sd(Interactduration))
mydat <- dat %>%
select(Name, Period, Scent, Interactduration) %>%
group_by(Period, Scent) %>%
summarise(mean = mean(Interactduration), sd = sd(Interactduration))
mydat
ggplot(data = dat) + aes(x = Period, y = Interactduration, fill = Scent) +
geom_boxplot(outlier.size = -1)  + geom_jitter(alpha=0.5,
position=position_jitterdodge(jitter.width=0.2),
aes(group= Scent))+
labs(y = "Duration of interaction with toy (s)") + theme_minimal()
